# yaml-language-server: $schema=https://goreleaser.com/static/schema.json

version: 2

project_name: myfirstclap

before:
  hooks:
    - cargo fetch --locked

builds:
  # You can have multiple builds defined as a yaml list
  - #
    # ID of the build.
    #
    # Default: Project directory name.
    id: linux-builds

    # Use rust.
    builder: rust

    # Binary name.
    # Can be a path (e.g. `bin/app`) to wrap the binary in a directory.
    #
    # Default: Project directory name.
    binary: myfirstclap

    # List of targets to be built, in Rust's format.
    # Default: [ "x86_64-unknown-linux-gnu", "x86_64-apple-darwin", "x86_64-pc-windows-gnu", "aarch64-unknown-linux-gnu", "aarch64-apple-darwin" ]
    targets:
      - x86_64-unknown-linux-gnu
      #- aarch64-unknown-linux-gnu

    # Path to project's (sub)directory containing the code.
    # This is the working directory for the Zig build command(s).
    #
    # Default: '.'.
    dir: .

    # Set a specific zig binary to use when building.
    # It is safe to ignore this option in most cases.
    #
    # Default: "cargo".
    # Templates: allowed.
    #tool: "cross"

    # Sets the command to run to build.
    # Can be useful if you want to build tests, for example,
    # in which case you can set this to "test".
    # It is safe to ignore this option in most cases.
    #
    # Default: zigbuild.
    command: build

    # Custom flags.
    #
    # Templates: allowed.
    # Default: "--release".
    flags:
      - --release
      - --package=cli # when using cargo-workspaces

    # Custom environment variables to be set during the builds.
    # Invalid environment variables will be ignored.
    #
    # Default: os.Environ() ++ env config section.
    # Templates: allowed.
    #env:
    #  - FOO=bar

    # Hooks can be used to customize the final binary,
    # for example, to run generators.
    #
    # Templates: allowed.
    #hooks:
    #  pre: ./foo.sh
    #  post: ./script.sh {{ .Path }}

    # If true, skip the build.
    # Useful for library projects.
    skip: false

  - id: mac-builds
    # Use rust.
    builder: rust
    binary: myfirstclap
    targets:
      - x86_64-apple-darwin
      - aarch64-apple-darwin
    dir: .
    command: build
    flags:
      - --release
      - --package=cli # when using cargo-workspaces
    skip: true

  - id: win-gnu-builds
    # Use rust.
    builder: rust
    binary: myfirstclap
    targets:
      - x86_64-pc-windows-gnu
    dir: .
    command: build
    flags:
      - --release
      - --package=cli # when using cargo-workspaces
    skip: true

  - id: win-msvc-builds
    binary: myfirstclap
    builder: rust
    tool: cargo-xwin
    command: build
    flags: 
      - --release
      - --package=cli
    targets:
      - x86_64-pc-windows-msvc
      - aarch64-pc-windows-msvc
    skip: true

archives:
  - formats:
      - tar.zst
    # this name template makes the OS and Arch compatible with the results of `uname`.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
    # use zip for windows archives
    format_overrides:
      - goos: windows
        formats:
          - zip


nfpms:
  - file_name_template: "{{ .ConventionalFileName }}"
    maintainer: nicop311
    formats:
      - deb
      - apk
      - rpm
      - archlinux
